// UDP Server
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#define PORT 5550 /* Port that will be opened */
#define BUFFER_SIZE 8193

int main()
{
  int server_sock; /* file descriptors */
  char recv_data[BUFFER_SIZE];
  int bytes_sent, bytes_received;
  struct sockaddr_in server_addr, client_addr; /* server and client address */
  char client_ip_str[INET_ADDRSTRLEN];

  int sin_size;

  if ((server_sock = socket(AF_INET, SOCK_DGRAM, 0)) == -1) /* call socket() */
  {
    perror("socket() error: ");
    exit(1);
  }

  memset(&(server_addr.sin_zero), 0, sizeof(server_addr)); /* Zero the rest of the structure */
  server_addr.sin_family = AF_INET;
  server_addr.sin_port = htons(PORT);
  server_addr.sin_addr.s_addr = INADDR_ANY; /* INADDR_ANY puts your IP address automatically */

  if (bind(server_sock, (struct sockaddr *)&server_addr, sizeof(struct sockaddr)) == -1) /* call bind() */
  {
    perror("bind() error: ");
    exit(1);
  }

  while (1)
  {
    sin_size = sizeof(struct sockaddr_in);

    bytes_received = recvfrom(server_sock, recv_data, BUFFER_SIZE - 1, 0, (struct sockaddr *)&client_addr, &sin_size);
    if (bytes_received < 0)
    {
      perror("recvfrom() error: ");
      continue;
    }
    else
    {
      recv_data[bytes_received] = '\0';
      if(inet_ntop(AF_INET, &(client_addr.sin_addr), client_ip_str, INET_ADDRSTRLEN) == NULL)
      {
        perror("inet_ntop() error: ");
      }
      else
      {
        printf("Received from client [%s:%d]: %s [%d bytes]\n", client_ip_str, ntohs(client_addr.sin_port), recv_data, bytes_received);
      }

      /* Echo the received data back to the client */
      bytes_sent = sendto(server_sock, recv_data, bytes_received, 0, (struct sockaddr *)&client_addr, sin_size);
      if (bytes_sent < 0)
      {
        perror("recvfrom() error: ");
      }
    }
  }

  close(server_sock);
  return 0;
}
